#!/usr/bin/python

import argparse
import datetime

from grub_api.database import Database
from grub_api.category import Category
from grub_api.recipe import Recipe
from grub_api.text_interface import TextInterface
from grub_api.utils import Heading
from grub_api.product import Ingredient
from grub_api.product import Product

def convert_quantity(amount, unit):
    multiplier = {
    'kg':(1000,'g'),
    'cup':(250,'ml'),
    'pinch':(1.25,'ml'),
    'tbsp':(15,'ml'),
    'tsp':(5,'ml'),
    'l':(1000,'ml')
    }
    _amount, _unit = (amount, unit)
    if _unit in multiplier:
        _amount = _amount * multiplier[_unit][0]
        _unit = multiplier[_unit][1]
    return _amount, _unit

def generate_shopping_list(grub_db):
    all_categories = grub_db.categories
    all_recipe_names = set([r.name for r in grub_db.recipes])
    recipes_in_categories = set()
    ti = TextInterface()
    for c in all_categories:
        ti.append('\n%s' % Heading(c.name))
        for r in sorted(c.recipes, key=lambda r: r.name):
            ti.append('- %s' % r.name)
            recipes_in_categories.add(r.name)
    ti.append('\nOther Recipes\n')
    for n in sorted(all_recipe_names - recipes_in_categories):
        ti.append('- %s' % n)
    ti.run()

    selected_recipes = []
    for line in ti.get_line():
        if line.startswith('Y '):
            selected_recipes.append(grub_db.find_recipe_by_name(line[2:]))

    ti = TextInterface()
    ti.append(Heading('Recipes'))
    # maps product_name to map of units to ingredient
    required_ingredients = {}

    def add_ingredients(ingredients):
        for i in ingredients:
            if i.product.name not in required_ingredients:
                required_ingredients[i.product.name] = {}
            _amount, _unit = convert_quantity(i.amount if i.amount else 0, i.unit)
            if _unit not in required_ingredients[i.product.name]:
                required_ingredients[i.product.name][_unit] = Ingredient(i.product, 0, _unit)
            required_ingredients[i.product.name][_unit].amount += _amount

    for r in selected_recipes:
        ti.append("%s\n" % r)
        add_ingredients(r.ingredients)
        
    add_ingredients(grub_db.weekly_items)
    
    ti.append(Heading('Shopping List %s' % datetime.date.today()))
    for p in required_ingredients.values():
        for i in p.values():
            ti.append('%s' % i)
    ti.run()

def add_category(name, grub_db):
    grub_category = Category(name)
    grub_db.add_category(grub_category)

def parse_ingredient(as_string, grub_db):
    a = None
    u = None
    p = None
    if as_string[0].isupper():
        p = grub_db.find_product_by_name(as_string.lower())
    else:
        t = as_string.split(' ', 1)
        a = float(t[0])
        if t[1][0].isupper():
            p = grub_db.find_product_by_name(t[1].lower())
        else:
            t = t[1].split(' ', 1)
            u = t[0]
            p = grub_db.find_product_by_name(t[1].lower())
    return Ingredient(p, amount=a, unit=u) if p else None

def parse_recipe(as_string_list, recipe, grub_db):
    l = ''
    n = as_string_list[0]
    first_i = 3
    if as_string_list[3].startswith("Location:"):
        l = as_string_list[3][10:]
        first_i = 5
    
    last_i = first_i
    while as_string_list[last_i]:
        last_i += 1
    
    i = []
    missing_ingredients = []
    for idx in xrange(first_i, last_i):
        ingredient = parse_ingredient(as_string_list[idx], grub_db)
        if ingredient:
            i.append(ingredient)
        else:
            missing_ingredients.append(as_string_list[idx])
    d = '\n'.join(as_string_list[last_i+1:])

    if missing_ingredients:
        print '\n'.join(missing_ingredients)

    recipe.name = n
    recipe.directions = d.decode('utf8')
    recipe.location = l
    recipe.ingredients = i

argparser = argparse.ArgumentParser(description="Command line to interact with the Grub database.")
argparser.add_argument('grub_input', help='The grub file to read from')
argparser.add_argument('-c','--category_edit', dest='edit_categories', action='store_true',
                       help='Edit the existing categories')
argparser.add_argument('-C','--category_new', dest='new_category', action='store',
                       help='Create a new category.')
argparser.add_argument('-s','--shopping_list', dest='shopping_list', action='store_true',
                       help='Generate a shopping list')
argparser.add_argument('-o','--output_path', dest='output_path', action='store',
                       help='Specifies output path')
argparser.add_argument('-R','--recipe_new', dest='recipe_new', action='store_true',
                       help='Create a new recipe.')
argparser.add_argument('-r','--recipe_edit', dest='recipe_edit', action='store',
                       help='Edit a recipe.')
argparser.add_argument('-P','--product_new', dest='new_product', action='store',
                       help='Create a new product.')
argparser.add_argument('-a','--product_search', dest='search_product', action='store',
                       help='Search for a product.')
argparser.add_argument('-w','--weekly', dest='edit_weekly_items', action='store_true',
                       help='Edit the existing weekly items')
argparser.add_argument('-u','--sanitise_units', dest='sanitise_units', action='store_true',
                       help='Clean up unit strings')

args = argparser.parse_args()

grub_db = Database(file_path=args.grub_input)
if not args.output_path:
    grub_db.save(args.grub_input + '.backup')

if args.edit_categories:
    ti = TextInterface()
    for i in xrange(len(grub_db.categories)):
        c = grub_db.categories[i]
        ti.append("%d=%s" % (i+1, c.name))

    ti.append('=' * 60)

    for r in sorted(grub_db.recipes, key=lambda r: r.name):
        prefix = ''
        for i in xrange(len(grub_db.categories)):
            c = grub_db.categories[i]
            if r in c.recipes:
                prefix += str(i+1)
            else:
                prefix += '-'
        ti.append( '%s %s' % (prefix, r.name))
    
    ti.run()

    deleted_categories = []
    processing_categories = True
    # clear all categories
    for c in grub_db.categories:
        c.recipes = []
    for line in ti.get_line():
        # check if we are switching from processing categories to recipes
        if line.startswith('==='):
            processing_categories = False
            continue
        if processing_categories:
            tokens = line.split('=')
            if len(tokens) == 2:
                index = int(tokens[0]) - 1
                name = tokens[1]
                if index < len(grub_db.categories):
                    if name:
                        if name != grub_db.categories[index].name:
                            print 'Updating %s to %s' % (grub_db.categories[index].name, name)
                            grub_db.categories[index].name = name
                    else:
                        print 'Removing %s' % grub_db.categories[index].name
                        deleted_categories.append(grub_db.categories[index].name)
                else:
                    raise Exception('Category index out of range (%d)' % index)
            else:
                raise Exception('Category name invalid format: %s' % line)
        elif not deleted_categories:
            # process recipes only if no categories were deleted
            recipe = grub_db.find_recipe_by_name(line[len(grub_db.categories)+1:])
            if not recipe:
                print 'recipe not found: %s' % line[len(grub_db.categories)+1:]
            for i in xrange(0, len(grub_db.categories)):
                if line[i] != '-':
                    grub_db.categories[i].recipes.append(recipe)

    grub_db.categories = [c for c in grub_db.categories if c.name not in deleted_categories]

elif args.new_category:
    add_category(args.new_category, grub_db)

elif args.shopping_list:
    generate_shopping_list(grub_db)

elif args.recipe_new:
    current_recipe = Recipe.get_recipe_template()
    ti = TextInterface()
    ti.append('%s' % current_recipe)
    ti.run()
    parse_recipe(list(ti.get_line()), current_recipe, grub_db)

    if grub_db.find_recipe_by_name(current_recipe.name):
        print "Recipe with name %s already exists." % current_recipe.name
    else:
        grub_db.add_recipe(current_recipe)

elif args.recipe_edit:
    current_recipe = grub_db.find_recipe_by_name(args.recipe_edit)
    if not current_recipe:
        print "Recipe '%s' not found." % args.recipe_edit
    else:    
        recipe_text = '%s' % current_recipe
        ti = TextInterface()
        ti.append(recipe_text)
        ti.run()
        parse_recipe(list(ti.get_line()), current_recipe, grub_db)

elif args.new_product:
    if grub_db.find_product_by_name(args.new_product):
        print "Product '%s' already exists" % args.new_product
    else:
        grub_db.add_product(Product(args.new_product))

elif args.edit_weekly_items:
    ti = TextInterface()
    for i in grub_db.weekly_items:
        ti.append("%s" % i)

    weekly_items = []
    ti.run() 
    for line in ti.get_line():
        i = parse_ingredient(line, grub_db)
        if not i:
            print "Unable to parse ingredient %s" % line
        else:
            weekly_items.append(i)
    grub_db.weekly_items = weekly_items

elif args.sanitise_units:
    # n = {}
    n = []
    for r in grub_db.recipes:
        for i in r.ingredients:
            if i.product.name == 'garlic' and i.unit == 'tsp':
                i.unit = 'clove'
            if i.unit == 'cups' or i.unit == 'cup(s)':
                i.unit = 'cup'
            elif i.unit == 'tins' or i.unit == 'tin(s)' or i.unit == 'can':
                i.unit = 'tin'
            elif i.unit == 'grams':
                i.unit = 'g'
            elif i.unit == 'liters' or i.unit == 'liter':
                i.unit = 'l'
            elif i.unit == 'milliliters':
                i.unit = 'ml'
            elif i.unit == 'packet' or i.unit == 'package' or i.unit == 'pack(s)':
                i.unit = 'pack'
            elif i.unit == 'pffft':
                i.unit = 'pfft'
            elif i.unit == 'sheet(s)' or i.unit == 'sheets':
                i.unit = 'sheet'
            elif i.unit == 'tablespoon' or i.unit == 'tablespoons':
                i.unit = 'tbsp'
            elif i.unit == 'teaspoon' or i.unit == 'teaspoons':
                i.unit = 'tsp'
            elif i.unit == 'large':
                i.unit = None
            elif i.unit == 'small':
                i.unit = 'pottle'
            ''' Print out recipe using given product '''
            # if i.product.name == 'quinoa':
            #     print r.name
            #     print '  -> %s' % i
            ''' Print out recipe using given unit '''
            # if i.unit == 'box':
            #     print r
            if not i.unit:
                continue
            # if i.product.name not in n:
                # n[i.product.name] = set()
            # n[i.product.name].add(i.unit)
            n.append(i.unit)
    n = list(set(n))
    n = sorted(n)
    print 'Num Unique Units', len(n)
    print '\n'.join(n)

    ''' Print out product name and each unit '''
    # for p, i_set in n.items():
    #     if len(i_set) > 1:
    #         print p
    #         for i in i_set:
    #             print '  -> %s' % i

elif args.search_product:
    for p in grub_db.products:
        if args.search_product.lower() in p.name.lower():
            print p.name

if args.output_path:
    grub_db.save(args.output_path)
else:
    grub_db.save(args.grub_input)